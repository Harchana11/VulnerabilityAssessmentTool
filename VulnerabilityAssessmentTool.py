import nmap
from fpdf import FPDF
from datetime import datetime

def scan_target(target):
    # Initialize the Nmap PortScanner
    nm = nmap.PortScanner()
    scan_data = []

    try:
        # Use the -Pn option to skip host discovery and scan all ports (1-65535)
        nm.scan(target, '1-65535', arguments='-Pn')

        if nm.all_hosts():
            for host in nm.all_hosts():
                scan_data.append(f'Host: {host} ({nm[host].hostname()})')
                scan_data.append(f'State: {nm[host].state()}')
                for proto in nm[host].all_protocols():
                    scan_data.append(f'Protocol: {proto}')
                    lport = nm[host][proto].keys()
                    if not lport:
                        scan_data.append(f'No open ports found.')
                    for port in sorted(lport):
                        service_name = nm[host][proto][port]['name']
                        scan_data.append(f'Port: {port}\tService: {service_name}')
                        if 'version' in nm[host][proto][port]:
                            service_version = nm[host][proto][port]['version']
                            scan_data.append(f'\tVersion: {service_version}')
        else:
            scan_data.append(f'No hosts found for target: {target}')
    except nmap.PortScannerError as e:
        scan_data.append(f"Scan failed: {str(e)}")
    except Exception as e:
        scan_data.append(f"An error occurred: {str(e)}")

    return scan_data

def generate_report(scan_data, report_file="report.pdf"):
    pdf = FPDF()
    pdf.add_page()

    # Set title and heading
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Vulnerability Assessment Report", ln=True, align="C")

    # Add scan data to the report
    pdf.ln(10)  # Add some space after the title
    pdf.set_font("Arial", size=10)
    for line in scan_data:
        pdf.multi_cell(0, 10, txt=line)

    # Save the PDF
    pdf.output(report_file)

if __name__ == "__main__":
    print("Vulnerability Assessment Tool")
    target = input("Enter the target IP or domain: ")

    # Scan the target
    scan_data = scan_target(target)

    # Create a unique report filename using the current timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_filename = f"report_{target.replace('.', '_')}_{timestamp}.pdf"

    # Generate the report
    generate_report(scan_data, report_file=report_filename)
    print(f"Report generated: {report_filename}")
